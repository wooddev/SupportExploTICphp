<?php

namespace Transfer\ReservationBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RdvRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RdvRepository extends EntityRepository
{
    
    public function findByTransporteur($transporteur){
        
        $query = $this->getEntityManager()->createQuery();
        
        $query->setDQL('
                        SELECT r
                        FROM TransferReservationBundle:Rdv r
                        JOIN r.evenements e
                        JOIN e.transporteur t
                        WHERE t.id = :id
                ')
                ->setParameter('id', $transporteur->getId());
        
        return $query->getResult();        
    }
    
    public function findByTransporteur_Annee_Semaine_Poste($transporteur, $annee, $semaine,$poste){
        
        $query = $this->getEntityManager()->createQuery();
        
        $query->setDQL('
                        SELECT r
                        FROM TransferReservationBundle:Rdv r
                        JOIN r.evenements e
                        JOIN e.transporteur t
                        JOIN r.creneauRdv c
                        JOIN c.typePoste p
                        WHERE t.id = :id
                        AND c.semaine = :semaine
                        AND c.annee = :annee
                        AND p.nom = :nomPoste
                ')
                ->setParameter('id', $transporteur->getId())
                ->setParameter('nomPoste', $poste->getNom())
                ->setParameter('semaine', $semaine)
                ->setParameter('annee', $annee);        
        
        return $query->getResult();        
    }
    public function findSemaineMinutesMin($annee, $semaine,$poste){
        
        $query = $this->getEntityManager()->createQuery();
        
        $query->setDQL('
                        SELECT min(c.heureDebut)
                        FROM TransferReservationBundle:CreneauRdv c
                        JOIN c.typePoste p
                        WHERE c.semaine = :semaine
                        AND c.annee = :annee
                        AND p.id = :idPoste
                ')
                ->setParameter('idPoste', $poste->getId())
                ->setParameter('semaine', $semaine)
                ->setParameter('annee', $annee);        
        
        return $query->getSingleScalarResult();        
    }
    
    public function findByStatutRdvForTrsp($statut,$transporteur){
                
        $query = $this->getEntityManager()->createQuery();
        
        $query->setDQL('
                        SELECT r
                        FROM TransferReservationBundle:Rdv r
                        JOIN r.evenements e
                        JOIN e.transporteur t
                        WHERE t.id = :id
                        AND r.statutRdv = :statut
                ')
                ->setParameter('id', $transporteur->getId())
                ->setParameter('statut', $statut);
        
        return $query->getResult();        
    }   
    
    public function findByStatutRdv($transporteur, $annee,$semaine,$statut){
        $query = $this->getEntityManager()->createQuery();
        
        $query->setDQL('
                        SELECT r
                        FROM TransferReservationBundle:Rdv r
                        JOIN r.evenements e
                        JOIN e.transporteur t
                        JOIN r.creneauRdv c
                        WHERE t.id = :id
                        AND c.semaine = :semaine
                        AND c.annee = :annee
                        AND r.statutRdv = :statut
                        ORDER BY c.dateHeureDebut ASC
                ')
                ->setParameter('id', $transporteur->getId())
                ->setParameter('semaine', $semaine)
                ->setParameter('annee', $annee)
                ->setParameter('statut',$statut);
        
        return $query->getResult();        
    }
    
    public function findByJourPoste($poste,$annee,$semaine,$jour,$statut){
        $query = $this->getEntityManager()->createQuery("
            SELECT r
            FROM TransferReservationBundle:Rdv r
            JOIN r.creneauRdv cr
            JOIN cr.typePoste tp
            WHERE cr.annee = :annee
            AND cr.semaine = :semaine
            AND cr.jour = :jour
            AND tp.id = :idPoste
            AND r.statutRdv = :statut
            ");
       $query->setParameters(array(
           'annee'=>$annee,
           'semaine'=>$semaine,
           'jour'=>$jour,
           'idPoste'=>$poste->getId(),
           'statut'=>$statut,
       ));
       return $query->getResult();
    }
    public function findBySemainePoste($poste,$annee,$semaine,$statut){
        $query = $this->getEntityManager()->createQuery("
            SELECT r
            FROM TransferReservationBundle:Rdv r
            JOIN r.creneauRdv cr
            JOIN cr.typePoste tp
            WHERE cr.annee = :annee
            AND cr.semaine = :semaine
            AND tp.id = :idPoste
            AND r.statutRdv = :statut
            ");
       $query->setParameters(array(
           'annee'=>$annee,
           'semaine'=>$semaine,
           'idPoste'=>$poste->getId(),
           'statut'=>$statut,
       ));
       return $query->getResult();
    }
    /**
     * récupère les Rdv provisoires réalisés après l'intervalle de temps
     * fixé dans les paramètres et associés aux créneaux de la semaine en cours
     * et de la semaine suivante (pour des raisons de performances)
     * 
     * 
     * @param type $interval
     * @return type
     */
    public function findProvisoires($interval){
        $q = $this->getEntityManager()->createQuery("
            SELECT r
            FROM TransferReservationBundle:Rdv r
            JOIN r.evenements e
            JOIN r.creneauRdv cr
            WHERE r.statutRdv = 'provisoire'
            AND e.type = 'reservation'
            AND e.dateRealisation <= :dateReservation   
            AND cr.dateHeureDebut BETWEEN :dateCreneau1 AND :dateCreneau2
            ");
        $dateReservation = new \DateTime();
        $dateReservation->sub($interval);
        
        $dateCreneau1 = new \DateTime('monday this week');
        $dateCreneau2 = new \DateTime('sunday next week');
        
        $q->setParameters(array(
            'dateReservation'=> $dateReservation ,
            'dateCreneau1'=>$dateCreneau1,
            'dateCreneau2'=>$dateCreneau2,
            ));
        return $q->getResult();
        
    }
      
            
}
